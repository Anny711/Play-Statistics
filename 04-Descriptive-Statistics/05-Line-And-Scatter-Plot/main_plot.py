import matplotlib.pyplot as plt
import random

if __name__ == "__main__":

    # scatter plot
    """在计算机编程中，随机种子（random seed）是用来初始化伪随机数生成器（pseudo-random number generator）的起始值。伪随机数生成器是一种算法，它根据一个初始值生成一系列看似随机的数字序列。

    随机种子在伪随机数生成中起到两个主要作用：
    1. 重现随机序列：使用相同的随机种子可以生成相同的随机序列。这对于需要重现随机性的情况很有用，例如在实验或模拟中。通过记录使用的随机种子，可以确保后续的运行会生成相同的随机序列，从而得到相同的结果。
    2. 增加随机性：使用不同的随机种子可以生成不同的随机序列。在某些情况下，我们需要获取不同的随机性，例如在游戏中生成不同的地图或随机化数据集。通过改变随机种子，我们可以得到不同的随机序列，从而增加了随机性。
    随机种子可以是任意整数，通常可以手动设置，也可以使用系统时间或其他随机源作为种子。在编程中，我们可以通过设置随机种子来控制伪随机数的生成行为。
    """
    random.seed(666)

    """这条Python语句使用了random模块中的randint函数来生成100个介于0和100之间（包括0和100）的随机整数。
    让我们逐步解释这个语句：
    1. `random`：这是Python的一个内置模块，提供了伪随机数生成器相关的函数。
    2. `randint(0, 100)`：这是`random`模块中的`randint`函数，它接受两个参数，即生成随机数的范围的下界和上界。在这个语句中，下界是0，上界是100。所以，`randint(0, 100)`将生成一个0到100之间的整数（包括0和100）。
    3. `for _ in range(100)`：这是一个for循环，它会执行100次。在每次循环中，`random.randint(0, 100)`会生成一个随机整数。
    综合起来，这条语句的作用是生成一个包含100个随机整数的列表，这些整数的取值范围是0到100（包括0和100）。
    """

    """在这个语句中，下划线 `_` 是一个通用的变量名，用于表示一个临时变量或占位符。它在这里的作用是表示一个不需要使用的循环变量。
    在Python中，使用下划线作为变量名是一种约定，用于表示一个不需要使用的变量。通常情况下，我们会给循环变量一个有意义的变量名，以便在循环体中使用它。但有时，如果我们不需要在循环体中使用循环变量，为了避免不必要的命名，我们可以使用下划线 `_` 作为占位符。
    在这个特定的语句中，`for _ in range(100)` 表示一个循环，它会执行100次，但循环变量 `_` 并没有在循环体中使用。这里使用下划线只是一种惯例，表示我们不关心循环变量的具体值。
    总之，下划线 `_` 在这个语句中只是一个占位符，表示一个不需要使用的循环变量。
    """
    x = [random.randint(0,100) for _ in range(100)]
    y = [random.randint(0,100) for _ in range(100)]
    plt.scatter(x, y)
    plt.show()

    # line plot
    x = [random.randint(0, 100) for _ in range(100)]
    plt.plot([i for i in range(100)], x)
    plt.show()